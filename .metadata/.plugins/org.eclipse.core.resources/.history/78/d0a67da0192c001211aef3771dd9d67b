package com.cakefest.core;

import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.GL10;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.Texture.TextureFilter;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.physics.box2d.Body;
import com.badlogic.gdx.physics.box2d.BodyDef;
import com.badlogic.gdx.physics.box2d.Box2DDebugRenderer;
import com.badlogic.gdx.physics.box2d.FixtureDef;
import com.badlogic.gdx.physics.box2d.PolygonShape;
import com.badlogic.gdx.physics.box2d.World;

public class CakeFestGame implements ApplicationListener {
    static final float BOX_STEP=1/60f;  
    static final int BOX_VELOCITY_ITERATIONS=6;  
    static final int BOX_POSITION_ITERATIONS=2;  
    static final float WORLD_TO_BOX=0.01f;  
    static final float BOX_WORLD_TO=100f;  
    
    static final int WIDTH = 480;
    static final int HEIGHT = 320;
	
	private OrthographicCamera camera;
	private SpriteBatch batch;
	private Android sp;
    private World world;
    private Box2DDebugRenderer debugRenderer;
    private Rectangle glViewport;

	@Override
	public void create() {
		float w = Gdx.graphics.getWidth();
		float h = Gdx.graphics.getHeight();
		
		world = new World(new Vector2(0, -100), true);
		camera = new OrthographicCamera(WIDTH, HEIGHT);            
		camera.position.set(WIDTH / 2, HEIGHT / 2, 0);

        glViewport = new Rectangle(0, 0, WIDTH, HEIGHT);
		batch = new SpriteBatch();
		
		sp = new Android(world, camera);
		//sprite = new Sprite(region);
		//Gdx.app.log("h w", sprite.getHeight() + " w " + sprite.getWidth());
		//sprite.setSize(sprite.getHeight(), sprite.getWidth());
		//sprite.setOrigin(sprite.getWidth()/2, sprite.getHeight()/2);
		//sprite.setPosition(-sprite.getWidth()/2, -sprite.getHeight()/2);


        BodyDef groundBodyDef =new BodyDef();  
        groundBodyDef.position.set(new Vector2(-100, 10));  
        Body groundBody = world.createBody(groundBodyDef);  
        PolygonShape groundBox = new PolygonShape();  
        groundBox.setAsBox((camera.viewportWidth) * 2, 0);
        FixtureDef f = new FixtureDef();
        f.shape = groundBox;
        f.density = 0.0f;
        groundBody.createFixture(, 0.0f); 
        debugRenderer = new Box2DDebugRenderer(); 
	}

	@Override
	public void dispose() {
		batch.dispose();
		sp.dispose();
	}

	@Override
	public void render() {		
		Gdx.gl.glClearColor(1, 1, 1, 1);
		Gdx.gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
        Gdx.gl.glViewport((int) glViewport.x, (int) glViewport.y,
                        (int) glViewport.width, (int) glViewport.height);
		
		batch.setProjectionMatrix(camera.combined);
        debugRenderer.render(world, camera.combined);  
        world.step(BOX_STEP, BOX_VELOCITY_ITERATIONS, BOX_POSITION_ITERATIONS);
		batch.begin();
		sp.draw(batch);
		batch.end();
	}

	@Override
	public void resize(int width, int height) {
	}

	@Override
	public void pause() {
	}

	@Override
	public void resume() {
	}
}
